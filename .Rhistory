library(ggplot2)
library(dplyr)
library(class)
library(gmodels)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) +
geom_point()
# Correlation between Petal.Length and Petal Width
cor(iris$Petal.Length, iris$Petal.Width)
x = levels(iris$Species)
print(x[1])
cor(iris[iris$Species == x[1],1:4])
print(x[2])
cor(iris[iris$Species == x[2],1:4])
print(x[3])
cor(iris[iris$Species == x[3],1:4])
table(iris$Species)
round(prop.table(table(iris$Species)) * 100, digits = 1)
summary(iris)
summary(iris[c("Petal.Width", "Sepal.Width")])
normalise <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris.normalised <- as.data.frame(lapply(iris[1:4], normalise))
set.seed(1234)
datasample <- sample(2, nrow(iris.normalised), replace = TRUE, prob = c(0.67, 0.33))
iris.training <- iris.normalised[datasample == 1, 1:4]
head(iris.training)
View(iris.training)
View(iris.training)
View(iris.normalised)
View(iris.normalised)
View(iris.training)
iris.test <- iris.normalised[datasample == 2, 1:4]
head(iris.test)
iris.trainLabels <- iris[datasample == 1, 5]
print(iris.trainLabels)
iris.testLabels <- iris[datasample == 2, 5]
print(iris.testLabels)
iris.knn <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels,
k = 3)
print(iris.knn)
irisTestLabels <- data.frame(iris.testLabels)
merge <- data.frame(iris.knn, irisTestLabels)
View(merge)
knitr::opts_chunk$set(echo = TRUE)
# Example of installing a package
install.packages('ggplot2')
install.packages("ggplot2")
# Loading required packages for this tutorial
library(ggplot2)
library(dplyr)
library(class)
library(gridExtra)
# Scatter plot visualising petal width and length grouped by species
ggplot(iris.data, aes(x = Petal.Width, y = Petal.Length, color = Species)) +
geom_point() +
theme_classic()
# Loading iris dataset
iris.data <- iris
# Viewing iris dataset structure and attributes
str(iris.data)
# Scatter plot visualising petal width and length grouped by species
ggplot(iris.data, aes(x = Petal.Width, y = Petal.Length, color = Species)) +
geom_point() +
theme_classic()
# Boxplot visualising variation in petal width between species
ggplot(iris.data, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
geom_boxplot() +
theme_classic()
# Boxplot visualising variation in petal width between species
ggplot(iris.data, aes(x = Species, y = Petal.Width, color = Species)) +
geom_boxplot() +
theme_classic()
library(ggplot2)
library(dplyr)
library(class)
library(gridExtra)
# Loading iris dataset
iris.data <- iris
# Viewing iris dataset structure and attributes
str(iris.data)
# Scatter plot visualising petal width and length grouped by species
ggplot(iris.data, aes(x = Petal.Width, y = Petal.Length, color = Species)) +
geom_point() +
theme_classic()
# Boxplot visualising variation in petal width between species
ggplot(iris.data, aes(x = Species, y = Petal.Width, color = Species)) +
geom_boxplot() +
theme_classic()
# Building a normalisation function
normalise <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris.norm <- as.data.frame(lapply(iris[1:4], normalise))
# Generating random number
set.seed(1234)
# Randomly generating our training and test sampels with a respective ratio of 2/3 and 1/3
datasample <- sample(2, nrow(iris.norm), replace = TRUE, prob = c(0.67, 0.33))
# Generate training set
iris.training <- iris.norm[datasample == 1, 1:4]
# Generate test set
iris.test <- iris.norm[datasample == 2, 1:4]
# Generate training labels
irisTraining.labels <- iris[datasample == 1, 5]
# Generate test labels
irisTest.labels <- iris[datasample == 2, 5]
# Building our knn classifier
iris.knn <- knn(train = iris.training, test = iris.test, cl = irisTraining.labels, k = 3)
# creating a dataframe from known (true) test labels
test.labels <- data.frame(irisTest.labels)
# combining predicted and known species classes
class.comparison <- data.frame(iris.knn, test.labels)
# giving appropriate column names
names(class.comparison) <- c("Predicted Species", "Observed Species")
# checking results
class.comparison
# confusion matrix
CrossTable(x = iris.testLabels, y = iris.knn, prop.chisq = FALSE)
library(gmodels)
install.packages("gmodels")
library(gmodels)
# confusion matrix
CrossTable(x = iris.testLabels, y = iris.knn, prop.chisq = FALSE)
# Loading required packages for this tutorial
library(ggplot2)
library(dplyr)
library(class)
library(gridExtra)
library(gmodels)
# Loading iris dataset
iris.data <- iris
# Viewing iris dataset structure and attributes
str(iris.data)
# Scatter plot visualising petal width and length grouped by species
ggplot(iris.data, aes(x = Petal.Width, y = Petal.Length, color = Species)) +
geom_point() +
theme_classic()
# Boxplot visualising variation in petal width between species
ggplot(iris.data, aes(x = Species, y = Petal.Width, color = Species)) +
geom_boxplot() +
theme_classic()
# Building a normalisation function
normalise <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris.norm <- as.data.frame(lapply(iris[1:4], normalise))
# Generating random number
set.seed(1234)
# Randomly generating our training and test sampels with a respective ratio of 2/3 and 1/3
datasample <- sample(2, nrow(iris.norm), replace = TRUE, prob = c(0.67, 0.33))
# Generate training set
iris.training <- iris.norm[datasample == 1, 1:4]
# Generate test set
iris.test <- iris.norm[datasample == 2, 1:4]
# Generate training labels
irisTraining.labels <- iris[datasample == 1, 5]
# Generate test labels
irisTest.labels <- iris[datasample == 2, 5]
# Building our knn classifier
iris.knn <- knn(train = iris.training, test = iris.test, cl = irisTraining.labels, k = 3)
# creating a dataframe from known (true) test labels
test.labels <- data.frame(irisTest.labels)
# combining predicted and known species classes
class.comparison <- data.frame(iris.knn, test.labels)
# giving appropriate column names
names(class.comparison) <- c("Predicted Species", "Observed Species")
# inspecting our results table
class.comparison
CrossTable(x = iris.testLabels, y = iris.knn, prop.chisq = FALSE)
# confusion matrix
CrossTable(x = iris.testLabels, y = iris.knn, prop.chisq = FALSE)
library(ggplot2)
library(dplyr)
library(class)
library(gridExtra)
library(gmodels)
# Loading iris dataset
iris.data <- iris
# Viewing iris dataset structure and attributes
str(iris.data)
# Scatter plot visualising petal width and length grouped by species
ggplot(iris.data, aes(x = Petal.Width, y = Petal.Length, color = Species)) +
geom_point() +
theme_classic()
# Boxplot visualising variation in petal width between species
ggplot(iris.data, aes(x = Species, y = Petal.Width, color = Species)) +
geom_boxplot() +
theme_classic()
# Building a normalisation function
normalise <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris.norm <- as.data.frame(lapply(iris[1:4], normalise))
# Generating random number
set.seed(1234)
# Randomly generating our training and test sampels with a respective ratio of 2/3 and 1/3
datasample <- sample(2, nrow(iris.norm), replace = TRUE, prob = c(0.67, 0.33))
# Generate training set
iris.training <- iris.norm[datasample == 1, 1:4]
# Generate test set
iris.test <- iris.norm[datasample == 2, 1:4]
# Generate training labels
irisTraining.labels <- iris[datasample == 1, 5]
# Generate test labels
irisTest.labels <- iris[datasample == 2, 5]
# Building our knn classifier
iris.knn <- knn(train = iris.training, test = iris.test, cl = irisTraining.labels, k = 3)
# creating a dataframe from known (true) test labels
test.labels <- data.frame(irisTest.labels)
# combining predicted and known species classes
class.comparison <- data.frame(iris.knn, test.labels)
# giving appropriate column names
names(class.comparison) <- c("Predicted Species", "Observed Species")
# checking results
class.comparison
# confusion matrix
CrossTable(x = iris.testLabels, y = iris.knn, prop.chisq = FALSE)
